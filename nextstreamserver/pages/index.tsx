import Head from "next/head";
import axios from "axios";
import Image from "next/image";
import { CircularProgress } from "@material-ui/core";
import styles from "../styles/Home.module.css";
import { useState } from "react";
import { useEffect } from "react";
import hideShowSpecificLanguageVersion, {
  getLocalStorageLanguage,
} from "../server/utils/translator";

export default function Home() {
  const [email, setEmail] = useState("");
  const [isRequestProcessing, setIsRequestProcessing] = useState(false);
  const [resultFromSendingResetLink, UseResultFromSendingResetLink] =
    useState("");
  const [languge, setLanguage] = useState("polish");
  useEffect(() => {
    hideShowSpecificLanguageVersion();
    var localStorageLanguage = getLocalStorageLanguage();
    if (localStorageLanguage != undefined) {
      {
        setLanguage(localStorageLanguage);
      }
    }
  }, [resultFromSendingResetLink]);
  useEffect(() => {
    hideShowSpecificLanguageVersion();
  }, []);
  let resetMailSend: boolean = false;

  async function sendResetRequest(email: string) {
    setIsRequestProcessing(true);
    console.log(`mail to send is ${email}`);
    const { data } = await axios.post("/api/mails/resetLinkRequestByUser", {
      email,
    });
    console.log(`data is ${JSON.stringify(data)}`);
    const { error, timeAgo } = data;
    if (error != undefined) {
      var message = `Na podany adres email wysłano już mail. Sprawdź wiadomości w spamie lub spróbuj ponownie po upływie 5 minut. Ostatni wysłany mail ${
        Math.floor(Math.floor(timeAgo / 1000) / 60) > 0
          ? Math.floor(Math.floor(timeAgo / 1000) / 60) + " minut i "
          : ""
      } ${Math.floor((timeAgo / 1000) % 60)} sekund temu.`;
      UseResultFromSendingResetLink(message);
      setIsRequestProcessing(false);
      return;
    }
    if (data === "user unknown") {
      console.log(
        "-------------------------user unknow-------------------------"
      );
      UseResultFromSendingResetLink("Użytkownik nieznany");
      setIsRequestProcessing(false);
      return;
    }
    if (data === "user not find in database") {
      console.log(
        "-------------------------user not find in database-------------------------"
      );
      UseResultFromSendingResetLink("Brak użytkownika o podanym mailu");
      setIsRequestProcessing(false);
      return;
    }

    UseResultFromSendingResetLink("Mail z resetem hasła wysłany poprawnie");
    setIsRequestProcessing(false);
    console.log(`result from reset link is ${data}`);
    return;
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Portfolio Event App - Portal Video Online</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <div className="grid" style={{ height: "80vh" }}>
        <div
          className="row d-flex justify-content-center"
          style={{ textAlign: "center", maxHeight: "100px" }}
        >
          <img
            src="/kolczyk800x.png"
            alt="Logo kolczyk"
            style={{ maxHeight: "100px", maxWidth: "80px" }}
          />
        </div>
        <div className="row PL" style={{ textAlign: "center" }}>
          <h1>Witamy na portalu wideo xxxx</h1>
        </div>
        <div className="row EN" style={{ textAlign: "center" }}>
          <h1>Welcome to the xxxx</h1>
        </div>
        <br />

        <div
          className="sixteen wide column PL"
          style={{ textAlign: "center", fontSize: "18px", marginTop: "10px" }}
        >
          Jeżeli posiadasz link dostępowy możesz przejść do platformy używając
          go. Przypominamy można jednocześnie korzystać z 1 urządzenia w celu
          oglądania materiałów.
        </div>
        <div
          className="sixteen wide column EN"
          style={{ textAlign: "center", fontSize: "18px", marginTop: "10px" }}
        >
          If you have an access link, you can go to the platform using it. As a
          reminder, you can simultaneously use only 1 device.
        </div>
        <div
          className="sixteen wide column PL"
          style={{ textAlign: "center", fontSize: "18px", marginTop: "10px" }}
        >
          Jeżeli chcesz wygenereować nowy link dostępowy możemy wysłać mail
          dzięki któremy będziesz mógł wygenerować nowy link dostępowy.
        </div>
        <div
          className="sixteen wide column EN"
          style={{ textAlign: "center", fontSize: "18px", marginTop: "10px" }}
        >
          If you want to generate a new access link, we can send you an e-mail
          thanks to which you will be able to generate a new access link.
        </div>
        <div className="fiveteen wide column">
          {resultFromSendingResetLink.includes(
            "Na podany adres email wysłano już mail."
          ) === true ? (
            <div>
              <div
                className="container PL"
                style={{ color: "red", fontSize: "25px" }}
              >
                {resultFromSendingResetLink}
              </div>
              <div
                className="container EN"
                style={{ color: "red", fontSize: "25px" }}
              >
                An e-mail has already been sent to the e-mail address provided.
              </div>
            </div>
          ) : null}
          {resultFromSendingResetLink ===
            "Mail z resetem hasła wysłany poprawnie" && languge === "polish" ? (
            <div
              className="container-fluid d-flex justify-content-center PL"
              style={{ color: "green", fontSize: "25px", marginTop: "25px" }}
            >
              Mail wysłany poprawnie. Sprawdź mail w celu resetu linku
              dostępowego.
            </div>
          ) : null}
          {resultFromSendingResetLink ===
            "Mail z resetem hasła wysłany poprawnie" &&
          languge === "english" ? (
            <div
              className="container-fluid d-flex justify-content-center EN"
              style={{ color: "green", fontSize: "25px", marginTop: "25px" }}
            >
              Mail sent correctly. Check your e-mail to reset the access link.
            </div>
          ) : null}
          {resultFromSendingResetLink ===
          "Mail z resetem hasła wysłany poprawnie" ? null : (
            <form
              className="ui form"
              onSubmit={async (event) => {
                event.preventDefault();
                await sendResetRequest(email);
                setEmail("");
                hideShowSpecificLanguageVersion();
              }}
            >
              <div className="field PL">
                <label style={{ fontSize: "15px", marginTop: "10px" }}>
                  Email w celu restartu dostępu do portalu
                </label>
                <input
                  type="email"
                  name="email"
                  placeholder="email@gmail.com"
                  onChange={(event) => setEmail(event.target.value)}
                  value={email}
                />
              </div>
              <div className="field EN">
                <label style={{ fontSize: "15px", marginTop: "10px" }}>
                  Email to reset access link to the portal
                </label>
                <input
                  type="email"
                  name="email"
                  placeholder="email@gmail.com"
                  onChange={(event) => setEmail(event.target.value)}
                  value={email}
                />
              </div>
              <div className="six wide centered column">
                {isRequestProcessing === true ? (
                  <div style={{ width: "100%", textAlign: "center" }}>
                    <CircularProgress />
                  </div>
                ) : (
                  <div>
                    <button className="ui button PL" style={{ width: "100%" }}>
                      Wyślij mail w celu wygenerowania nowego linku dostępowego
                    </button>
                    <button className="ui button EN" style={{ width: "100%" }}>
                      Send an e-mail to generate a new access link
                    </button>
                  </div>
                )}

                <br />
                {resultFromSendingResetLink ===
                "Brak użytkownika o podanym mailu" ? (
                  <p
                    style={{
                      color: "red",
                      fontWeight: "bold",
                      textAlign: "center",
                      marginTop: "5px",
                    }}
                  >
                    Brak użytkownika o podanym mailu
                  </p>
                ) : null}
              </div>
            </form>
          )}
          <br />
        </div>
      </div>
    </div>
  );
}
